#!/usr/bin/env ruby
# Ruby 2.0

# Takes an ICE collection URL as input and outputs a file containing:
#    index
#    partid0.seq
#    partid1.seq
#    partid2.seq
#    ...
#
# Usage: export-collection [collection-URL] -c [client-id] -t [access-token] -o [output-filename]

require 'json'
require 'optparse'
require 'tmpdir'
require 'uri'

INDEX_FILE = 'index'

def main
  collection_url  = ARGV[0]
  opts            = get_options()

  exit(1) unless collection_url

  export = Export.new(clientid: opts[:clientid],
                      token: opts[:token],
                      output_filename: opts[:output],
                      collection_url: collection_url)
  export.write_zip()
  #exit(0)
end

def get_options
  opts = {}
  OptionParser.new do |options|
    options.on("-o", "--output O", "Filename to output the collection") do |o|
      opts[:output] = o
    end

    options.on("-t", "--token T", "ICE API Token") do |t|
      opts[:token] = t
    end

    options.on("-c", "--client C", "ICE API Client ID") do |c|
      opts[:clientid] = c
    end
  end.parse!

  opts
end

class Export
  def initialize(args)
    @clientid = args[:clientid]
    @token = args[:token]
    @output_filename = args[:output_filename]
    @collection_url = args[:collection_url]
    @collection_id = get_folder_id(@collection_url)
    @host = get_host(@collection_url)
    @tmpdir = Dir.mktmpdir
  end

  def write_zip()
    @collection_count = get_entry_count()
    write_index()
    write_sequences()
    shell("zip --recurse-paths --junk-paths #{@output_filename} #{@tmpdir}")
    puts @output_filename
  end

  def write_index()
    outfile = File.join(@tmpdir, INDEX_FILE)

    output = ice("/rest/folders/#{@collection_id}/entries?limit=#{@collection_count}")
    File.open(outfile, 'w') { |file| file.write(output) }

    if $? == 0
      @collection_file = outfile
      return outfile
    else
      raise "I could not write the index file."
    end
  end

  def write_sequences()
    #raise "The entries have not yet been downloaded" unless @collection_file
    collection = JSON.parse(File.read(@collection_file))
    puts @collection_file

    collection["entries"].map do |entry_hash|
      write_sequence(entry_hash["id"])
    end
  end

  def write_sequence(entry_id)
    sequence_file = File.join(@tmpdir, "#{entry_id}.seq")
    ice("/rest/file/#{entry_id}/sequence/original", output_file: sequence_file)
    sequence_file
  end

  def ice(path, opts = {})
    output_file_option = "--output #{opts[:output_file]}"
    command = <<EOF
curl  --request GET \
  --header "X-ICE-API-Token-Client: #{@clientid}" \
  --header "X-ICE-API-Token: #{@token}" \
  --insecure \
  #{output_file_option if opts[:output_file]} \
  #{@host}#{path}
EOF

    shell(command)
  end

  def get_entry_count()
    entry_json = ice("/rest/folders/#{@collection_id}/entries")
    JSON.parse(entry_json)["count"]
  end
end


def get_host(collection_url)
  uri = URI.parse(collection_url)
  uri.path = ''
  uri
end

# Example URLs:
#   https://registry.jbei.org/folders/279
#   https://registry.jbei.org/folders/279/
def get_folder_id(collection_url)
  uri = URI.parse(collection_url)
  uri.path.match('folders\/(\d+)')[1]
end

def shell(command)
  puts command
  `#{command}`
end

main()

# Tests
#
# export = Export.new(clientid: 'dev',
#                     token: 'rYXWBtWXCSFgtSdH0MowMMngwAxGu1SoS1NCuDO6WGE=',
#                     output_filename: 'export.zip',
#                     collection_url: 'https://registry.jbei.org/folders/171')

# puts export.write_zip()
# export.zip

# puts export.write_sequence(48646)
# tmp/8646.seq

# puts export.write_index()
# "/tmp/index"

# puts export.get_entry_count()
# 2

# puts get_host('https://registry.jbei.org/folders/279')
# https://registry.jbei.org